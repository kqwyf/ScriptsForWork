#!/bin/bash

# 本脚本用于快速进行登录服务器时的身份验证，并向服务器发送（上传）文件。详细说明
# 见'autoconnect'脚本。
# 支持scp、sftp及用户自定义传输方式。

config_dir=""
default_config="default"

_host=${1}
shift
_files=$@

# Check dependencies.
if ! which expect > /dev/null; then
    echo "ERROR: Program 'expect' not found. It is necessary for entering password and operating sftp session automatically." 1>&2
    echo "       Usually you can find it in the software repository of your Linux distribution." 1>&2
    exit 1
elif ! which openssl > /dev/null; then
    echo "WARNING: Program 'openssl' not found. It is used to decrypt your encrypted password." 1>&2
    echo "         If you use encrypted password file to connect, it may complains an error." 1>&2
fi

# Check config directory.
if ! [ -d "${config_dir}" ]; then
    if ! [ -e "${config_dir}" ]; then
        echo "ERROR: The config directory is not found." 1>&2
        echo "       Please create a new config directory and retry." 1>&2
        exit 1
    else
        echo "ERROR: The config directory is not a directory. Please check it or change the value of 'config_dir' in this script." 1>&2
        exit 1
    fi
fi

# Load default config.
if ! [ -f "${config_dir}/${default_config}.sh" ]; then
    echo "WARNING: The default config is not found. It is recommended to create a default config." 1>&2
else
    source ${config_dir}/${default_config}.sh
fi

# Load user specified config.
if ! [ -f "${config_dir}/${_host}.sh" ]; then
    echo "ERROR: The config for '${_host}' is not found." 1>&2
    exit 1
else
    source ${config_dir}/${_host}.sh
fi

# Preprocess the config.
if [ -z "${remote_dir}" ]; then
    if [ "${username}" = "root" ]; then
        remote_dir="/root"
    else
        remote_dir="/home/${username}"
    fi
fi

# Define utility functions.
function _make_fifo_file() {
    local tmp_file=`mktemp --dry-run`
    if ! [ -e ${tmp_file} ]; then mkfifo ${tmp_file}; else echo "ERROR: Failed to create a FIFO file." 1>&2; exit 1; fi
    echo ${tmp_file}
}

function _gen_expect_script_sftp() {
    # Generate script for logging in an sftp session and sending files automatically.
    # Here the if-else statement can be regarded as conditional compiling statement.
    #
    # Parameters:
    # $1: authentication mode, either "password" or "key"
    # $2: if $1 is "password", $2 is the cleartext password string. if empty, let user enter it.
    #     if $1 is "key", $2 is the identity file.

    echo "set timeout -1"

    # Login.
    if [ "$1" = "key" ]; then
        echo "spawn sftp -P ${recv_port} -i ${identity_file} ${username}@${hostname}"
    else
        echo "spawn sftp -P ${recv_port} ${username}@${hostname}
              expect {
                  \"*password:\" {
             "

        # Check if user provided a password.
        if [ -z "${2}" ]; then # user doesn't provide a password
            # Wait the user to enter password.
            echo "    stty -echo
                      expect_user -timeout 3600 -re \"(.*)\\[\\r\\n]\"
                      stty echo
                      send \"\$expect_out(1,string)\r\"
                 "
        else # user provided a password
            # Send the password we already obtained.
            echo "    send \"${2}\r\""
        fi

        echo "        exp_continue
                  }
             "
    fi

    # Change directory.
    echo "        \"*sftp>\" {
                      send \"cd ${remote_dir}\r\"
                  }
              }"

    # Send files.
    for f in ${_files}; do
        echo "expect \"*sftp>\" {
                  send \"put ${f}\r\"
              }
             "
    done

    # Exit sftp session by closing the stdin.
    echo "expect \"*sftp>\" {
              exit
          }
         "
}

function _gen_expect_script_scp() {
    # Parameters:
    # $1: the cleartext password string.

    echo "set timeout -1
          spawn scp -P ${send_port} ${_files} ${username}@${hostname}:${remote_dir}
          expect_before \"*password:\" {
              send \"${1}\r\"
          }
          interact
         "
}

# Send files.
if [ "${send_type}" = "custom" -o "${send_auth_type}" = "custom" ]; then
    _custom_send ${_files}
    exit 0
fi

if [ "${send_auth_type}" = "none" ]; then
    if [ "${send_type}" = "scp" ]; then
        scp -P ${send_port} ${_files} ${username}@${hostname}:${remote_dir}
    elif [ "${send_type}" = "sftp" ]; then
        _tmp_file=`_make_fifo_file`
        _gen_expect_script_sftp "password" "" > ${_tmp_file} &
        expect -f ${_tmp_file}
    fi
elif [ "${send_auth_type}" = "password" ]; then
    if ! [ -z "${password_str}" ]; then
        # Use cleartext password string
        _tmp_file=`_make_fifo_file`
        if [ "${send_type}" = "scp" ]; then
            _gen_expect_script_scp "${password_str}" > ${_tmp_file} &
        elif [ "${send_type}" = "sftp" ]; then
            _gen_expect_script_sftp "password" "${password_str}" > ${_tmp_file} &
        fi
        expect -f ${_tmp_file}
    else
        # Use password file
        if [ -z "${password_file}" ]; then
            echo "ERROR: 'password_str' and 'password_file' cannot be both empty." 1>&2
            exit 1
        else
            # Check whether the password is encrypted
            if ! [ "${password_file_encrypted}" = "true" -o "${password_file_encrypted}" = "false" ]; then
                echo "ERROR: The value of 'password_file_encrypted' should be 'true' or 'false'." 1>&2
                exit 1
            fi
            if ${password_file_encrypted}; then
                # Use encrypted password file
                _tmp_file=`_make_fifo_file`
                if [ "${send_type}" = "scp" ]; then
                    _gen_expect_script_scp "$(openssl rsautl -decrypt -inkey ${identity_file} -in ${password_file})" > ${_tmp_file} &
                elif [ "${send_type}" = "sftp" ]; then
                    _gen_expect_script_sftp "password" "$(openssl rsautl -decrypt -inkey ${identity_file} -in ${password_file})" > ${_tmp_file} &
                fi
                expect -f ${_tmp_file}
            else
                # Use cleartext password file
                _tmp_file=`_make_fifo_file`
                if [ "${send_type}" = "scp" ]; then
                    _gen_expect_script_scp "$(cat ${password_file})" > ${_tmp_file} &
                elif [ "${send_type}" = "sftp" ]; then
                    _gen_expect_script_sftp "password" "$(cat ${password_file})" > ${_tmp_file} &
                fi
                expect -f ${_tmp_file}
            fi
        fi
    fi
elif [ "${send_auth_type}" = "key" ]; then
    if [ "${send_type}" = "scp" ]; then
        scp -P ${send_port} -i ${identity_file} ${_files} ${username}@${hostname}:${remote_dir}
    elif [ "${send_type}" = "sftp" ]; then
        _tmp_file=`_make_fifo_file`
        _gen_expect_script_sftp "key" "${identity_file}" > ${_tmp_file} &
        expect -f ${_tmp_file}
    fi
fi

